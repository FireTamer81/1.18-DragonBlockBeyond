package io.firetamer.dragonblockbeyond.util.objects.gui_components;

import com.mojang.blaze3d.systems.RenderSystem;
import com.mojang.blaze3d.vertex.PoseStack;
import net.minecraft.client.gui.components.AbstractWidget;
import net.minecraft.client.gui.narration.NarrationElementOutput;
import net.minecraft.client.renderer.GameRenderer;
import net.minecraft.network.chat.TextComponent;
import net.minecraft.resources.ResourceLocation;


/**
 * For the time being, this class will not be used since it seems to be giving me trouble and I just want to finish the fabricator GUI
 *
 * The main idea behind this was that the "init" method would be called and apply the size and three colors, that would be used to
 * dynamically draw the button (no textures need), but if you wanted to the texture could be an icon that would be centered in the button
 * based on size.
 *
 * Hopefully I can finish this some day, cause that would be awesome, but not now.
 */


public class IconToggleWidget extends AbstractWidget {
    protected ResourceLocation iconTextureResource;
    protected boolean isStateTriggered;
    protected int texTopLeftX;
    protected int texTopLeftY;
    protected int texWidth;
    protected int texHeight;
    protected GUIColor backgroundColor;
    protected GUIColor activatedColor;
    protected GUIColor hoverColor;
    protected int buttonPosTopLeftX;
    protected int buttonPosTopLeftY;
    protected int buttonWidth;
    protected int buttonHeight;

    public IconToggleWidget(int topLeftX, int topLeftY, int width, int height, boolean initialTriggerState, GUIColor backgroundColorIn, GUIColor activatedColor, GUIColor hoverColorIn) {
        super(topLeftX, topLeftY, width, height, TextComponent.EMPTY);
        this.isStateTriggered = initialTriggerState;
        this.backgroundColor = backgroundColorIn;
        this.activatedColor = activatedColor;
        this.hoverColor = hoverColorIn;

        this.buttonPosTopLeftX = topLeftX;
        this.buttonPosTopLeftY = topLeftY;
        this.buttonWidth = width;
        this.buttonHeight = height;
    }

    public void initButtonTexture(int textureTopLeftX, int textureTopLeftY, int textureWidth, int textureHeight, ResourceLocation resourceLocationIn) {
        this.texTopLeftX = textureTopLeftX;
        this.texTopLeftY = textureTopLeftY;
        this.texWidth = textureWidth;
        this.texHeight = textureHeight;
        this.iconTextureResource = resourceLocationIn;
    }

    public void setStateTriggered(boolean newState) { this.isStateTriggered = newState; }

    public boolean isStateTriggered() { return this.isStateTriggered; }

    public void setPosition(int newXPos, int newYPos) {
        this.x = newXPos;
        this.y = newYPos;
    }



    @Override
    public void updateNarration(NarrationElementOutput p_169152_) { this.defaultButtonNarrationText(p_169152_); }

    @Override
    public void renderButton(PoseStack stack, int mouseX, int mouseY, float partialTicks) {
        RenderSystem.setShader(GameRenderer::getPositionTexShader);
        RenderSystem.setShaderTexture(0, this.iconTextureResource);
        RenderSystem.disableDepthTest();


        /**************************************************************************************************************/
        int i = this.texTopLeftX;
        int j = this.texTopLeftY;

        //GUIHelper.drawFillColor(stack.last().pose(), buttonPosTopLeftX, buttonPosTopLeftY, buttonHeight, buttonWidth, this.backgroundColor);

        if (this.isStateTriggered) {
            //GUIHelper.drawFillColor(stack.last().pose(), buttonPosTopLeftX, buttonPosTopLeftY, buttonHeight, buttonWidth, this.activatedColor);
        }

        if (this.isHoveredOrFocused()) {
            //GUIHelper.drawFillColor(stack.last().pose(), buttonPosTopLeftX, buttonPosTopLeftY, buttonHeight, buttonWidth, this.hoverColor);
        }

        this.blit(stack, (this.buttonPosTopLeftX - this.texWidth) / 2, (this.buttonPosTopLeftY - this.texHeight) / 2, i, j, this.texWidth, this.texHeight);
        /**************************************************************************************************************/


        RenderSystem.enableDepthTest();
    }
}
