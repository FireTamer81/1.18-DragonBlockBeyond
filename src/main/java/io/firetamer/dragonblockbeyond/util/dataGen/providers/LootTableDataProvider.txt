package io.firetamer.dragonblockbeyond.util.dataGen.providers;

import com.google.common.collect.ImmutableList;
import com.mojang.datafixers.util.Pair;
import io.firetamer.dragonblockbeyond.DragonBlockBeyond;
import net.minecraft.advancements.critereon.EnchantmentPredicate;
import net.minecraft.advancements.critereon.ItemPredicate;
import net.minecraft.advancements.critereon.MinMaxBounds;
import net.minecraft.advancements.critereon.StatePropertiesPredicate;
import net.minecraft.data.DataGenerator;
import net.minecraft.data.loot.BlockLoot;
import net.minecraft.data.loot.LootTableProvider;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.enchantment.Enchantments;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.SlabBlock;
import net.minecraft.world.level.block.state.properties.SlabType;
import net.minecraft.world.level.storage.loot.*;
import net.minecraft.world.level.storage.loot.LootTable.Builder;
import net.minecraft.world.level.storage.loot.entries.LootItem;
import net.minecraft.world.level.storage.loot.functions.ApplyBonusCount;
import net.minecraft.world.level.storage.loot.functions.CopyNbtFunction;
import net.minecraft.world.level.storage.loot.functions.LimitCount;
import net.minecraft.world.level.storage.loot.functions.SetItemCountFunction;
import net.minecraft.world.level.storage.loot.parameters.LootContextParamSet;
import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
import net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition;
import net.minecraft.world.level.storage.loot.predicates.MatchTool;
import net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider;
import net.minecraft.world.level.storage.loot.providers.number.ConstantValue;
import net.minecraft.world.level.storage.loot.providers.number.UniformGenerator;
import net.minecraftforge.registries.RegistryObject;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

public class LootTableDataProvider extends LootTableProvider {
    public LootTableDataProvider(DataGenerator generator) {
        super(generator);
    }

    @Override
    protected List<Pair<Supplier<Consumer<BiConsumer<ResourceLocation, Builder>>>, LootContextParamSet>> getTables() {
        return ImmutableList.of(Pair.of(Blocks::new, LootContextParamSets.BLOCK));
    }

    @Override
    protected void validate(Map<ResourceLocation, LootTable> map, ValidationContext validationtracker) {
        map.forEach((name, table) -> LootTables.validate(validationtracker, name, table));
    }

    private class Blocks extends BlockLoot {
        @Override
        protected void addTables() {
            HashMap<Block, Function<Block, Builder>> map = new HashMap<>();



            /**
            map.put(ColorableBlockTest.RGB_CONCRETE.get(), BlockLoot::createSingleItemTable);

            map.put(ColorableBlockTest.RGB_GLOWSTONE.get(),
                    (block) -> createSilkTouchDispatchTable(block,
                                                            applyExplosionDecay(block,
                                                                                LootItem.lootTableItem(Items.GLOWSTONE_DUST)
                                                                                        .apply(SetItemCountFunction.setCount(
                                                                                                UniformGenerator.between(
                                                                                                        2.0F,
                                                                                                        4.0F)))
                                                                                        .apply(ApplyBonusCount.addUniformBonusCount(
                                                                                                Enchantments.BLOCK_FORTUNE))
                                                                                        .apply(LimitCount.limitCount(
                                                                                                IntRange.range(1,
                                                                                                               4))))));
            map.put(ColorableBlockTest.RGB_SEA_LANTERN.get(),
                    (block) -> createSilkTouchDispatchTable(block,
                                                            applyExplosionDecay(block,
                                                                                LootItem.lootTableItem(Items.PRISMARINE_CRYSTALS)
                                                                                        .apply(SetItemCountFunction.setCount(
                                                                                                UniformGenerator.between(
                                                                                                        2.0F,
                                                                                                        3.0F)))
                                                                                        .apply(ApplyBonusCount.addUniformBonusCount(
                                                                                                Enchantments.BLOCK_FORTUNE))
                                                                                        .apply(LimitCount.limitCount(
                                                                                                IntRange.range(1,
                                                                                                               5))))));

            map.forEach((block, function) -> add(block,
                                                 block == ColorableBlockTest.RGB_GLOWSTONE.get() ||
                                                 block == ColorableBlockTest.RGB_SEA_LANTERN.get() ? applyConditionalNbtCopy(
                                                         function.apply(block)) : applyNbtCopy(function.apply(block))));
             **/
        }



        private Builder createSilkTouchOnlySlabItemTable(Block block) {
            return LootTable.lootTable().withPool(LootPool.lootPool()
                    .when(MatchTool.toolMatches(ItemPredicate.Builder.item()
                            .hasEnchantment(new EnchantmentPredicate(Enchantments.SILK_TOUCH, MinMaxBounds.Ints.atLeast(1)))))
                    .setRolls(ConstantValue.exactly(1))
                    .add(applyExplosionDecay(block, LootItem.lootTableItem(block)
                            .apply(SetItemCountFunction.setCount(ConstantValue.exactly(2))
                                    .when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(block)
                                            .setProperties(StatePropertiesPredicate.Builder.properties()
                                                    .hasProperty(SlabBlock.TYPE, SlabType.DOUBLE)))))));
        }

        private Builder applyNbtCopy(Builder table) {
            DragonBlockBeyond.LOGGER.debug(table.toString());
            return table.apply(CopyNbtFunction.copyData(ContextNbtProvider.BLOCK_ENTITY).copy("color", "color"));
        }

        private Builder applyConditionalNbtCopy(Builder table) {
            return table.apply(CopyNbtFunction.copyData(ContextNbtProvider.BLOCK_ENTITY)
                    .copy("color", "color")
                    .when(MatchTool.toolMatches(ItemPredicate.Builder.item()
                            .hasEnchantment(new EnchantmentPredicate(Enchantments.SILK_TOUCH, MinMaxBounds.Ints.atLeast(1))))));
        }
    }
}
